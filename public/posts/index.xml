<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My New Hugo Site</title>
    <link>http://example.org/posts/</link>
    <description>Recent content in Posts on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 Jul 2023 22:56:28 +0900</lastBuildDate><atom:link href="http://example.org/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>&#34;Github on AppleM1Pro&#34;</title>
      <link>http://example.org/posts/github-on-applem1pro/</link>
      <pubDate>Sat, 08 Jul 2023 22:56:28 +0900</pubDate>
      
      <guid>http://example.org/posts/github-on-applem1pro/</guid>
      <description>新しいPC(Macbook pro M1Pro)でも、同じ様にGithubにアクセスしたいので、その方法
gitの設定 $ git config --global user.name &amp;#34;odaba&amp;#34; $ git config --global user.email &amp;#34;***@****.**.jp&amp;#34; SSH Keyの作成 $ ssh-keygen -t rsa -C &amp;#34;***@****.**.jp&amp;#34; ※この後、パスフレーズを入力
SSH Keyのテキストコピー 以下のコマンドを実行後、表示されたテキストに対して、選択範囲を指定し、 copy選択
$ cat .ssh/id_rsa.pub Githubでの設定 ブラウザでGithubにログインし、「Setting」…「SSH and GPG keys」を選択し [New SSH key]クリック
適当に「Title」を入力し、「Key」に上記copyしたテキストを貼り付け後 [Add SSH key]クリック
無事GithubにSSH Keyが登録されると、上記メールアドレスにメールが届く
Githubに接続するテスト $ ssh -T git@github.com yes/noと聞かれるので、yesを入力する
パスフレーズを聞かれたら、入力する
この後、以下のように表示されると成功
Hi hanuomk2! You&amp;#39;ve successfully authenticated, but GitHub does not provide shell access.
以上</description>
    </item>
    
    <item>
      <title>MacbookPro 2021(Apple M1Pro)でT-Code</title>
      <link>http://example.org/posts/t-code-with-emacs-on-applem1pro/</link>
      <pubDate>Sat, 08 Jul 2023 11:20:25 +0900</pubDate>
      
      <guid>http://example.org/posts/t-code-with-emacs-on-applem1pro/</guid>
      <description>絶滅危惧種のT-Code使いです(笑) T-Code(tc)は、melpaを使用できるのですが、 Emacs 28.2とかだと、やり方が少し変ったみたいです
謝辞-参考サイト Emulator of GNU Emacs IME patch for Windows (tr-ime)
melpa設定 init.elに以下を追加
(package-initialize) (customize-set-variable &amp;#39;package-archives `(,@package-archives (&amp;#34;melpa&amp;#34; . &amp;#34;https://melpa.org/packages/&amp;#34;))) T-Code(tc)のインストール 1.Emacsを起動し、以下のコマンドを実行
M-x package-refresh-contents M-x package-install tc 2.package-install後、以下のコマンドを実行
M-x tcode-install init.elの設定 (require &amp;#39;tc-setup) (set-input-method &amp;#34;japanese-T-Code&amp;#34;) (define-key global-map [?¥] [?\\]) (define-key global-map [?\C-¥] &amp;#39;toggle-input-method) ;; C-hをバックスペースにする (global-set-key &amp;#34;\C-h&amp;#34; &amp;#39;delete-backward-char) 以上</description>
    </item>
    
    <item>
      <title>MacbookPro 2021(Apple M1Pro)でEmacs</title>
      <link>http://example.org/posts/emacs-on-applem1pro/</link>
      <pubDate>Mon, 03 Jul 2023 22:01:12 +0900</pubDate>
      
      <guid>http://example.org/posts/emacs-on-applem1pro/</guid>
      <description>ずっとMacbook Pro 2012を使っていました。もう最新OSに バージョアップできないし、最近ずっと円安だし、買い替えするなら中古だと 思って、最初はMacbook Pro 13インチを狙っていたのですが、 14インチとの値段差が少なくなってきたので、Macbook Pro 14インチを 落札しました。ということで、Emacsのインストールです。
謝辞-参考サイト Homebrewのインストール方法を分かりやすく解説（M1 Macも対応
Macに最適なEmacsを選ぶ - アナグマのモノローグ
Homebrewインストール HomebrewのWebpage通りに、ターミナルに貼り付け実行
$ /bin/bash -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&amp;#34; マシンのパスワードを求められるので入力し、しばらく待つ
その後、インストールが完了するので、ターミナルの出力通りにPATHを通す
$ (echo; echo &amp;#39;eval &amp;#34;$(/opt/homebrew/bin/brew shellenv)&amp;#34;&amp;#39;) &amp;gt;&amp;gt; /Users/ユーザ名/.zprofile $ eval &amp;#34;$(/opt/homebrew/bin/brew shellenv)&amp;#34; Emacs Mac Prot版のインストール 今回はrailwaycat氏のバイナリ版をインストールしてみます
$ brew tap railwaycat/emacsmacport $ brew install emacs-mac --with-modern-icon --with-imagemagic $ ln -s /opt/homebrew/opt/emacs-mac/Emacs.app /Applications キーボード設定変更 標準だと日本語切り替えをC-SPC([Control]キーと[スペース]キーの同時押し)で行うので、 以下の手順でこれを解除
「システム設定&amp;gt;キーボード」を選択 [キーボードショートカット]をクリック 左側エリアの「入力ソース」を選択 右側エリアの「前の入力ソース選択」のチェックを外し\ 右側エリアの「入力メニューの次のソースを選択」のチェックを外す init.elの追加 とりあえずinit.elは以下の様にした
(mac-auto-ascii-mode 1) ;; 言語を日本語にする (set-language-environment &amp;#39;Japanese) ;; 極力UTF-8とする (prefer-coding-system &amp;#39;utf-8) ;; TABの表示幅。初期値は8 (setq default-tab-width 4) ;; 質問をy/nで回答する (fset &amp;#39;yes-or-no-p &amp;#39;y-or-n-p) ;;;;;;;;;;;;;;;;;;;;;;; ;;; キーバインディング ;;; ;;;;;;;;;;;;;;;;;;;;;;; ;; C-hをバックスペースにする (global-set-key &amp;#34;\C-h&amp;#34; &amp;#39;delete-backward-char) ;; M-¥で\(バックスラッシュ)を入力する (define-key global-map [?</description>
    </item>
    
    <item>
      <title>DeviceConnectHoGPをコンパイルしてみる</title>
      <link>http://example.org/posts/dconnectdevicehogp/</link>
      <pubDate>Sun, 26 Mar 2023 14:20:40 +0900</pubDate>
      
      <guid>http://example.org/posts/dconnectdevicehogp/</guid>
      <description>前回、HoGP(HID Over GATT Profile)でスマートフォンをBLEマウス/キーボード 代りにする方法をBlogに書いたのですが、Web会議でマイクミュートしたいと思い、 本家dConnectDeviceHOGPのSourceをちょっとだけ変更し、 オンラインミーティングアプリTeamsのキーボードショートカット Mic Mute(Ctrl+Shift+m)を追加しています
WindowsとMacのPCで、接続確認してみましたが、Windowsだと&amp;#34;\(円)&amp;#34;キーが 反応しませんでした
Macだと記号キーが英語キーボードの配列になってましたので、 環境に合わせて、修正する必要がありそうです
謝辞 HoGPでAndroid端末をBLEキーボード/マウスにする
Android をBlueToothキーボードにする
DeviceConnect-Android
HOGP-Build
開発環境 MacBook Pro(13-inch, Mid2022) MD101J/A MacOS Catalina 10.15.7 Android Studio Chipmunk | 2021.2.1 コンパイル方法 このソースをコンパイルするには、以下の手順が必要となります
詳細は本家のWebPageを参照して下さい
GitHubアカウントの設定 DeviceConnect-Androidに従って自身のGitHubアカウントでPersonal access tokenを 作成します
GitHubアカウントでログインします GitHubの[Settings] &amp;gt; [Developer settings] &amp;gt; [Personal access tokens] &amp;gt; [Tokens (classic)]を選択後、[Generate new token] &amp;gt; [Generate new token (classic) をクリックします scopeはrepo、write:packages、read:packagesにチェックを付けて、 personal access tokenを作成します プロジェクトのルートディレクトリにgithub.propertiesというファイルを 作成して配置し、ユーザ名とトークンを入力します
gpr.usr=&amp;#34;GitHubユーザ名&amp;#34; gpr.key=&amp;#34;トークン&amp;#34; 以下の様に環境変数を設定してもいいみたいです</description>
    </item>
    
    <item>
      <title>Device Web API ManagerをAndroidで使ってみる</title>
      <link>http://example.org/posts/device-web-api-manager/</link>
      <pubDate>Fri, 10 Feb 2023 20:35:42 +0900</pubDate>
      
      <guid>http://example.org/posts/device-web-api-manager/</guid>
      <description>Device Web API Managerはスマホ上で仮想サーバとして動作し、 デバイスを操作するためのWeb APIを提供します
このWeb APIは、HID over GATT Profile(HoGP)をサポートするので、 スマホをパソコンのBLEタッチパッド・キーボードにできます
最近左手デバイスとか流行っているし、Web会議とかでマイクミュート どうしようか?wordとかexcelのキーボードショートカットをスマホから使えないかな? と考えて探してました
謝辞-参考サイト Device Web API Manager
デバイスWebAPIコンソーシアム
HoGPでAndroid端末をBLEキーボード/マウスにする
AndroidをBluetooth keyboardにする
Device Web API Managerのインストールと設定 上記参考サイトDevice Web API ManagerのGegtting started Android に従ってDevice Web API ManagerをAndroidにインストールします
環境は以下の通り
Google pixel 5a(AndoirdOS 12)
注意点は、「外部IPを許可」を有効にした後に、 「Device Web API Manager」をオンにすることなんだけど… 同セグメント内のPCからアクセスできませんでした
「Step4 Device Web APIのデモを起動」はWebpage上の[デモを起動]を使わずに Device Web API Managerアプリ内の[Host]アイコンをタッチして下さい
右上[︙]タッチ後、更に「プラグイン設定」をタッチすると 「Host設定」画面が表示されるので、「デモページ」をタッチ後[インストール]をタッチ
この後、色々セキュリティ関係を許可すると、Webpage(chrome)からGoogle Pixel 5aのカメラを使えます
HoGPでAndroidをPCに接続してみる ここも上記参考サイトに従ってHoGPプラグインのAPKをインストールして下さい
ここも注意点は、HOGPサーバ設定の「Mouse」の項目を「relative」、 「Keyboard」の項目をONにした後に、設定の「HOGPサーバ」の項目をONにすることです
これでPCにBluetooth接続すると、スマホからPCをタッチバッド・キーボード操作できます
以上</description>
    </item>
    
    <item>
      <title>Emacs on Android で eww</title>
      <link>http://example.org/posts/eww-with-emacs-on-android/</link>
      <pubDate>Sat, 26 Feb 2022 22:38:56 +0900</pubDate>
      
      <guid>http://example.org/posts/eww-with-emacs-on-android/</guid>
      <description>Android(Termux)でもEmacsでewwの設定をしてみた
謝辞-参考サイト TermuxでEmacsを使うためにやったこと
Emacs での テキストブラウザ eww を使えるレベルにする
eww設定 ~/emacs.d/init.elに好みで以下を設定する
&amp;#34;shr-external-browser&amp;#34;だと何か警告されるので &amp;#34;browse-url-secondary-browser-function&amp;#34;に変更した
;; デフォルトブラウザをEWWにする (setq browse-url-browser-function #&amp;#39;eww-browse-url) ;; Web検索をgoogleに設定 (setq eww-search-prefix &amp;#34;http://www.google.co.jp/search?q=&amp;#34;) ;; httpsアクセスに失敗する (setq gnutls-algorithm-priority &amp;#34;NORMAL:-VERS-TLS1.3&amp;#34;) ;; chromeを&amp;#34;&amp;amp;&amp;#34;で起動できるようにする (setq browse-url-generic-program (executable-find &amp;#34;termux-open-url&amp;#34;)) (setq browse-url-secondary-browser-function &amp;#39;browse-url-generic) 以上</description>
    </item>
    
    <item>
      <title>Emacs on MacOS で eww</title>
      <link>http://example.org/posts/eww-with-emacs-on-macos/</link>
      <pubDate>Sun, 13 Feb 2022 21:11:36 +0900</pubDate>
      
      <guid>http://example.org/posts/eww-with-emacs-on-macos/</guid>
      <description>ewwはEmacs上で動作するwebブラウザで標準インストール済
以下のコマンドで起動する
M-x eww 謝辞-参考サイト emacs 26.2 で https アクセスに失敗する
EmacsでTLSエラーを回避
eww設定 ~/emacs.d/init.elに好みで以下を設定する
;; デフォルトブラウザをEWWにする (setq browse-url-browser-function #&amp;#39;eww-browse-url) ;; Web検索をgoogleに設定 (setq eww-search-prefix &amp;#34;http://www.google.co.jp/search?q=&amp;#34;) ;; httpsアクセスに失敗する (setq gnutls-algorithm-priority &amp;#34;NORMAL:-VERS-TLS1.3&amp;#34;) ※httpsアクセスに失敗する場合、gnutlsをインストールする
$ brew install gnutls ※gnutlsインストール後に、関数&amp;#34;(gnutls-available-p)&amp;#34;を C-jで評価したけど、tは返ってこず、以下の通り、何故か変わらなかった? けどhttpsはアクセス可能
ClientHello\ Padding Key\ Share Post\ Handshake\ Auth PSK\ Key\ Exchange\ Modes Cookie Supported\ Versions Early\ Data Pre\ Shared\ Key Session\ Ticket Record\ Size\ Limit Extended\ Master\ Secret Encrypt-then-MAC …) 以上</description>
    </item>
    
    <item>
      <title>Hugo on Android でもGithub Pagesにポストする練習</title>
      <link>http://example.org/posts/github-pages-with-hugo-on-android/</link>
      <pubDate>Fri, 11 Feb 2022 15:44:01 +0900</pubDate>
      
      <guid>http://example.org/posts/github-pages-with-hugo-on-android/</guid>
      <description>いちおう、Termux on Android で Githubの続き
MacOSで構築したGithub Pagesへのポスト環境を Androidからもポストできる様にする
謝辞-参考サイト TermuxでHugo入門の段
Termuxの設定 Hugo on MacOS で技術情報サイトをGithub Pagesで公開する で行った様に、Guthub Pages用のテンプレートを作成し、 テーマをインストール
$ pkg add hugo $ hugo new site hanuomk2.github.io $ cd hanuomk2.github.io $ git clone https://github.com/qqhann/hugo-primer.git themes/hugo-primer --recursive $ rm -rf themes/hugo-primer/.git #これがあるとgit add -Aでerrorになるので削除 Githubの該当repositoryからsourceをpull $ git init $ git branch -M main $ git remote add origin git@github.com:hanuomk2/hanuomk2.github.io.git $ mv archetypes/default.md archetypes/default.org.md #これがあるとpullでerrorになる $ mv config.toml config.old.toml #これがあるとpullでerrorになる $ git pull origin main 後は、Hugo on MacOS環境でOrgmodeフォーマット記事をポストする練習 に従ってポストする</description>
    </item>
    
    <item>
      <title>Termux on Android で Github</title>
      <link>http://example.org/posts/github-with-termux-on-android/</link>
      <pubDate>Thu, 10 Feb 2022 21:35:19 +0900</pubDate>
      
      <guid>http://example.org/posts/github-with-termux-on-android/</guid>
      <description>MacOSと同じ様にAndroidからもGithubにアクセスしたいので、その方法
謝辞-参考サイト Android端末でgitやれるようになるまで
Termuxにgitとsshのインストール $ pkg add git openssh $ git config --global user.name &amp;#34;odaba&amp;#34; $ git config --global user.email &amp;#34;***@****.**.jp&amp;#34; ※emailアドレスはMacOSから設定したものに合わせる
SSH Keyの作成 $ ssh-keygen -t rsa -C &amp;#34;***@****.**.jp&amp;#34; ※この後、パスフレーズを入力
SSH Keyのテキストコピー 以下のコマンドを実行後、表示されたテキストに対して、指で選択範囲を指定し、 copy選択
$ cat .ssh/id_rsa.pub Githubでの設定 ブラウザChromeでGithubにログインし、「Setting」…「SSH and GPG keys」を選択し [New SSH key]クリック
適当に「Title」を入力し、「Key」に上記copyしたテキストを貼り付け後 [Add SSH key]クリック
無事GithubにSSH Keyが登録されると、上記メールアドレスにメールが届く
TermuxでGithubに接続するテスト $ ssh -T git@github.com yes/noと聞かれるので、yesを入力する
パスフレーズを聞かれたら、入力する
この後、以下のように表示されると成功
Hi hanuomk2! You&amp;#39;ve successfully authenticated, but GitHub does not provide shell access.</description>
    </item>
    
    <item>
      <title>Termux on Android で Emacs</title>
      <link>http://example.org/posts/emacs-on-termux/</link>
      <pubDate>Thu, 10 Feb 2022 16:57:08 +0900</pubDate>
      
      <guid>http://example.org/posts/emacs-on-termux/</guid>
      <description>謝辞-参考サイト How to install DDSKK using MELPA
Emacsインストール $ apt-get install emacs 一度Emacsを起動させて、C-x C-cで閉じる
melpa 設定 ~/.emacs.d/init.elに以下を追加
(require &amp;#39;package) (add-to-list &amp;#39;package-archives &amp;#39;(&amp;#34;melpa&amp;#34; . &amp;#34;https://melpa.org/packages/&amp;#34;) t) (package-initialize) ddskk インストール ソフトキーボード等ではこっちを使う
M-x package-install ddskk ddskkの設定は、上記参考サイトを確認のこと
t-code インストール 絶滅危惧種のTコード使いなので、普段はこっちを使ったりする
M-x package-install tc M-x tcode-install ~/.emacs.d/init.elに以下を追加
(C-¥に割り当てできなかったので、C-\とC-x ¥に割り当て)
(require &amp;#39;tc-setup) (set-input-method &amp;#34;japanese-T-Code&amp;#34;) ;; (define-key global-map [?\C-¥] &amp;#39;toggle-input-method) (global-set-key (kbd &amp;#34;C-\\&amp;#34;) &amp;#39;toggle-input-method) (global-set-key (kbd &amp;#34;C-x \¥&amp;#34;) &amp;#39;toggle-input-method) 以上</description>
    </item>
    
    <item>
      <title>AndroidでTermux</title>
      <link>http://example.org/posts/termux-on-android/</link>
      <pubDate>Thu, 10 Feb 2022 16:40:24 +0900</pubDate>
      
      <guid>http://example.org/posts/termux-on-android/</guid>
      <description>ちょっと前にガラケーからAndroidに乗り換えた
どうせならEmacsを使いたいので、AndroidにTermuxを入れる事にした
TermuxはGoogle Playでもダウンロードできるが最新ではないみたいで、 Google PlayでダウンロードできるものはC-SPCが使えないみたいなので、 F-Droidで配布されているものを使うのが良いと思う
F-Droidのインストール F-Droid公式サイトをChromeでアクセスし、F-Droidアプリをダウンロードする。 ダウンロードしてアプリを開くと、「不明なアプリのインストール」メッセージが 表示されるので、「この提供元のアプリを許可」をONにする
後、セキリティー対策のため、 [設定]-[アプリ]-[特別なアプリアクセス]-[不明なアプリのインストール] でChromeを「許可しない」に戻す
Termuxのインストール F-Droidアプリを起動し、「Termux」を検索してインストールする また、アプリを開くと、「不明なアプリのインストール」メッセージが 表示されるので、「この提供元のアプリを許可」をONにする
ここでも、セキリティー対策のため、 [設定]-[アプリ]-[特別なアプリアクセス]-[不明なアプリのインストール] でF-Droidを「許可しない」に戻す
Termuxの設定 以下のコマンドを入力して、storageへのアクセスを許可する
$ apt-get update; apt-get upgrade; termux-setup-storage 「~/.termux/termux.properties」に(Emacs等のエディタをインストールしてから) 以下を設定し、C-SPCを有効にする
ctrl-space-workaround = true 以下のコマンドで設定を反映する
$ termux-reload-settings 以上</description>
    </item>
    
    <item>
      <title>easy-hugoでポストする練習</title>
      <link>http://example.org/posts/post-at-easy-hugo-on-emacs/</link>
      <pubDate>Sun, 06 Feb 2022 21:40:28 +0900</pubDate>
      
      <guid>http://example.org/posts/post-at-easy-hugo-on-emacs/</guid>
      <description>謝辞-参考サイト emacs-easy-hugo
Hugoとemacsの融合(easy-hugo)
EmacsでPATHの設定が引き継がれない問題をエレガントに解決する
MacターミナルでGithubにプッシュする際に毎回パスフレーズを聞かれる時の対処法
easy-hugo インストール emacs上で以下のコマンドを実行(MELPAをあらかじめ設定しておく)
M-x package-install .emacs.d/init.elの設定 (setq easy-hugo-basedir &amp;#34;~/hanuomk2.github.io/&amp;#34;) (setq easy-hugo-url &amp;#34;https://hanuomk2.github.io&amp;#34;) (setq easy-hugo-sshdomain &amp;#34;github.com&amp;#34;) (setq easy-hugo-root &amp;#34;/&amp;#34;) (setq easy-hugo-previewtime &amp;#34;300&amp;#34;) (setq easy-hugo-postdir &amp;#34;content/posts&amp;#34;) (setq easy-hugo-default-ext &amp;#34;.org&amp;#34;) (define-key global-map (kbd &amp;#34;C-c C-e&amp;#34;) &amp;#39;easy-hugo) deploy.shの作成 #!/bin/sh echo -e &amp;#34;\033[0;32mDeploying updates to GitHub...\033[0m&amp;#34; hugo git add -A git rm --cached -r themes/hugo-primer msg=&amp;#34;rebuilding site `LANG=C date`&amp;#34; if [ $# -eq 1 ] then msg=&amp;#34;$1&amp;#34; fi git commit -m &amp;#34;$msg&amp;#34; git push -u origin main 上記参照サイトに従って、パスフレーズを入力しなくてもpushできるようにしておく</description>
    </item>
    
    <item>
      <title>Hugo on MacOS環境でOrgmodeフォーマット記事をポストする練習</title>
      <link>http://example.org/posts/post-orgmode-format-text-with-hugo-on-macos/</link>
      <pubDate>Wed, 02 Feb 2022 23:22:40 +0900</pubDate>
      
      <guid>http://example.org/posts/post-orgmode-format-text-with-hugo-on-macos/</guid>
      <description>謝辞-参考サイト Hugo Org-Mode Default Archetype
archetypes/default.org を設定 $ cd archetypes/default.org $ cp default.md default.org この後、前記参考サイトの様な形で、default.orgを設定
例えばこんな感じ
#+TITLE: {{ replace .Name &amp;#34;-&amp;#34; &amp;#34; &amp;#34; | title }} #+DATE: {{ .Date }} #+DRAFT: false #+CATEGORIES[]: #+TAGS[]: 新しい記事をOrgmodeフォーマットでポストする $ hugo new posts/new-article.org contents/posts/new-article.orgを編集する
localhostでblogサーバを確認する $ hugo server この後、http://localhost:1313/にブラウザでアクセスする
repositoryにpushする $ hugo $ git add -A $ git rm --cached -r themes/hugo-primer $ git commit -m &amp;#34;a new article&amp;#34; $ git push -u origin main 以上</description>
    </item>
    
    <item>
      <title>Hugo on MacOS で技術情報サイトをGithub Pagesで公開する</title>
      <link>http://example.org/posts/github-pages-with-hugo-on-macos/</link>
      <pubDate>Sun, 30 Jan 2022 17:01:35 +0900</pubDate>
      
      <guid>http://example.org/posts/github-pages-with-hugo-on-macos/</guid>
      <description>謝辞-参考サイト HUGO GETTING STARTED
Hugo で github にブログを立ち上げる Part 1
Hugo で github にブログを立ち上げる Part 2
Hugo + GitHub で静的サイトを作る（mac編）
Hugo-Primer
HomebrewでHugoをインストール $ brew install hugo Github Pages用のテンプレートの作成 hugo new site {ユーザ名}.github.io
私の例だと以下の通り
$ hugo new site hanuomk2.github.io テーマのインストール $ cd hanuomk2.github.io $ git clone https://github.com/qqhann/hugo-primer.git themes/hugo-primer --recursive $ echo &amp;#39;theme = &amp;#34;hugo-primer&amp;#34;&amp;#39; &amp;gt;&amp;gt; config.toml 記事をポストする $ hugo new posts/my-first-post.md 「content/posts/my-first-post.md」には以下のの様なテキストが自動で挿入される
--- title: &amp;#34;my-first-post&amp;#34; date: 2022-01-18T23:05:31+09:00 draft: true --- 『draft: true』を『draft: false』に変更しておく　localhostサイト確認 $ hugo server この後、http://localhost:1313/にブラウザでアクセスする</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>http://example.org/posts/my-first-post/</link>
      <pubDate>Sat, 29 Jan 2022 18:12:23 +0900</pubDate>
      
      <guid>http://example.org/posts/my-first-post/</guid>
      <description>Github Pagesはじめました</description>
    </item>
    
  </channel>
</rss>
